<변수, 문자와 숫자>
    * 변수명은 반드시 명시적이어야 한다.
    * 변수명은 동사가 아닌 명사로 사용을 해주어야한다. (개발자들과의 약속)
    * 첫 글자는 숫자 사용 불가능
    * 예약어를 변수명으로 선언 불가능
    
    <변수명 표기법 꿀팁 3가지>
        * camelCase : 띄어쓰기 대신 대 문자로 구분 (자바스크립트는 대부분 camelCase 사용)
        * PascalCase : 첫 글자도 대문자, 띄어쓰기 대신 대문자로 구분
        * snake_case : 띄어쓰기 대신에 언더바(_)로 구분

    - console.log() : ()안에서 데이터를 연산해서 출력하는 것도 가능하다.
    
    <변수의 종류>
        재할당 : 이미 데이터가 할당되어 있는 변수에 다시 할당
        재선언 : 이미 선언 되어있는 변수명으로 다시 선언

        - var : 재할당 O, 재선언 O (var는 많은 문제가 발생하기 때문에 지향하지 않는다.)
        - let : 재할당 o, 재선언 x.
        - const : 상수 변수(변하지 않는 값), 재할당 X, 선언과 할당이 반드시 같이 이루어 져야한다.
                                                        ex) const = a; (X) 
                                                            const a = 1; (O)
         
        
    <데이터 타입>
        - string : 문자열 타입 ( + 연산자만이 사용이 가능하다. )
            1. 따옴표로 정의("",'')
            2. 숫자, 알파벳, 공백 등 모두 텍스트화 가는
            
            ex) "abc123", 'abc123'
            *"문자열" + 숫자는 문자열로 반환해준다.

        - Number : 숫자형 타입 (숫자 타입 데이터는 모든 연산이 가능하다.)
            1. 숫자 그대로를 입력
            2. 따옴표로 감사진 숫자와는 견혀 다르다.
            * 100(숫자), "100"(문자)

        - 문자열 함수
            .trim() 문자열에 공백 제거를 해준다.

        <산술 연산자>
            + , - ,* , /

            '100' * 20 = 2000 => 인 경우 숫자로 변환을 시도하고, 숫자로 변환이 가능한 데이터 경우 정상적으로 수행
            'abc' * 20 = Nan  => 숫자로 변환이 불가능한 경우 NaN값을 반환 해준다.
            <Nan>
            - NaN(Not of Number) : 문자열을 포함하는 연산중에 +가 아닌 연산을 사용 했을때 NaN값을 받는다.
            'a' - 5, 'a' * 2, 'a' / 2 = Nan
            
            <문자열 연결 연산자>
            * 'a' + 10 = 'a10' 더하기 연산에 문자열이 하나라도 포함되는 경우 문자열 연결 연산자이다.

<객체, 배열>
    <배열(Array)>
        - 여러개의 데이터를 순서와 함께 저장하는 창고
        - let abc = ["a", "b", "c"]로 배열을 정의, 
            1. 이때 a,b,c는 요소(Element)라고 불린다. 
            2. 각 요소에는 인덱스 값을 가진다.
            3. Index를 통해 각 요소에 접근이 가능하다.
            4. 접근 방법 abc[0] => a로 접근 가능

        <Property>
            데이터 타입마다 가지고 있는 고유한 속성들
            -Array.length : 특정 배열의 길이를 나타내는 속성, 길이 => 배열 내 요소의 개수

        <Method>
            어떠한 기능을 가지고 있는 명령어

            <배열(array) Method>
                -Array.push("추가해주고 싶은 데이터") : 배열에 마지막 부분에 데이터를 추가한다.

                -Array.pop() : 배열에 마지막 부분의 데이터를 삭제한다.
                
                -Array.indexOf("index 값을 알고싶은 데이터") : 특정 배열에서 주어진 데이터의 index 값을 찾아 반환
                
                -Array.includes("확인하고 싶은 데이터") : 특정 배열에 주어진 데이터가 존재하는지 여부 확인 => True, False로 반환해준다

            
    <객체(object)>
        {name : Jason'} 이때 전체를 Property라고 하고, name을 key, Jason을 value라고 한다.
        
        <객체에 접근하는 방법>
            ex) let userData={
                name:'이성민',
                age:24,
                gender'man'
            };

            -Dot natation : userData.name  -> 이성민
                            userData.email="esm211@naver.com" 객체에 없는것을 입력해주면 자동으로 할당된다.

            -Break notation : userData["name"] -> 이성민
                *이때 ""(문자열)로 값을 불러와 주어야한다, 만약 문자로 안 불러와 주면 변수로 인식을 하기 때문이다.
                              userData["email"]="esm211@naver.com"

        <객체 메소드>
            - Object.keys() : 주어진 객체의 key만을 가져와 배열에 담아주는 메서드 (문자열로 반환해줌)
            - Object.values() : 주어진 객체의 value만들 자겨와 배열에 담아주는 메서드

<함수>
    -어떠한 기능을 수행하거나 계산을 수행하는 코드의 집합

    <함수 사용>
        - 함수를 호출하는 방법, 함수 선언 종류

<querySelector를 활용한 데이터 참조>
    document : 해당 페이지의 HTML구조를 담고 있는 객체이다.
        document.querySelector() : HTML구조에서 태그들을 가지고 올 수 있는 함수이다.
        document.querySelector().value : 값을 가지고 올려면 value를 붙여 주어야한다.
        document.querySelectorAll('해당태그') : 해당태그를 전체 선택 해주고 배열 헝태로 저장이 된다.
        document.body.style.backgroundImage = `url('./images/${weather}.jpg')`; : 배경 이미지 지정을 해준다.
<날짜를 생성하는 new Date>
    Data : 자바스크립트는 

<Date 날짜 객체>
    new Data() : 날짜 데이를 가져오는 함수
        .setHours(0,0,0,0): 자정으로 설정해주는 new Data의 함수 기능

    *Math.floor() : 소수점 날려주는 Math함수

<함수의 반환>
    return은 값으 반환해주고 함수를 종료시켜준다.

<함수의 선언 방식>
    - 함수 선언문 같은 경우는 호이스팅의 영향을 받게 된다
        ex) function sum(){

        }
    *이때 호이스팅이란 자바스크립트에서 선언문을 자동으로 위쪽으로 올려주는것을 의미한다.

    -표현식, 화살표함수 같은 경우 호이스팅이 동작을 안한다.
        ex) const sum=()=>{

        }

<localhost란?>
    localhost === 127.0.0.1
    DNS (Domain Name System) : ip주소를 도메인으로 변경해준다
                                ex) 127.0.0.1 -> localhost
    
    <포트번호>
        - localhost:5500에서 5500을 포트번호 라고한다.
        - 포트번호는 라이브 서버가 사용하기위해서 사용해둔 번호이다.
        - localhost로 통하는 여러개의 문 중 하나이다.

        *좌물쇠가 있는 사이트는 443번 포트를 사용하고 있다.
        *없는 사이트는 80번 포트를 사용하고 있다.

        좌물쇠가 있는 사이트는 https프로토콜을 사용하고 있다고 말하고, 없는 사이트는 http프로토콜을 사용한다고 말한다.


<비교 연산자>
    - 자바스크립트의 데이터를 서로 비교

    == : 느슨한 비교

    === : 엄격한 비교
    *remaining === Nan: Nan은 비교 연산자가 통하지 않는다
        -함수를 이용해서 비교해야한다. isNan()

    - 원시 타입(Primitive type) : string, Number, Boolean, undefined, Symbol, NULL
        특징 : 불변성 -> 데이터 변화 X, 복사는 얕은 복사

    - 참조 타입(Reference type) : 원시타입을 제외한 모든 것
        특징 : 복사는 깊은 복사

<논리연산자>
    &&) AND 연산자 => 양쪽에 위치판 조건을 모두 만족하는 true
    ||) OR 연산자 => 양쪽에 위치한 조건 중, 하나라도 만족하는 경우 true

<조건문>
   -  코드의 실행 분기점
    <if 문>

<스크립트 태그 위치>
    - document
        HTML을 전부 가지고 오는 요소이다.

    - querySelector
        document.querySelector()를 이용하면 특정한 id,요소,class에 해당하는 요소를 가지고 올 수 있다.

    - getElementById
        document.getElementById("idname")을 이용하면 id로 지정된 HTML부분을 가지고 올 수 있다.
        여기서 getElementById는 id를 이미 지정하고 있기 때문에 #을 사용할 필요가 없다.

    -.textContent
        ex) document.querySelector("#D-DAY-message").textContent
        textContent는 자바스크립트에서 저장되는 값을 해당 테그에 텍스트화 시켜 HTML에 띄어준다.

    -.innerHTML
        ex)messageContainer.innerHTML = "<h3>D-DAY를 입력해주세요.<h3>";
        innerHTML은 적정한 HTML 위치에 HTML요소를 자바스크립트를 통해서 태그를 직접 넣어줄 수 있다.
            *기존에 있는 HTML 태그들은 없어진다.
    - 

    <defer>속성, 스크립트 순서 관련 속성
        - <script src="./index.js" defer></script>  : defer속성은 파싱이 중단되지 않고 HTML이 생성이 되는 기능이다.

            
    <JS로 HTML, CSS조작하기>
        - style로 접근이 가능하다.
            ex) messageContainer.style.color = "red";

<반복문>
    - 반복적인 코드의 양을 획기적으로 압출

    <for 문>
        for(let i = 0; i<10; i=i+1){
            print("반복문")
        }

    <for-of 와 for- in>

        const documentObject = {
            days: document.getElementById("days"),
            hours: document.getElementById("hours"),
            min: document.getElementById("min"),
            sec: document.getElementById("sec"),
        };

        for(let ket in documentObject){
            console.log(key);
        }

        <for-of>
            배열의 요소를 하나하나 가지고 온다.

            const documentArr = ["days", "hours", "min", "sec"];
            for (let tag of documentArr) {
                console.log(tag);
            }

    
    <while 문>
        let i =0

        while(i<10){
            print("반복문")
            i=i+1
        }

<setTimeout>
        
        자바스크립트에 실행속도에 있어서 딜레이를 줄 수 있다.
            setTimeout(() => {
        
        }, timeout);
        *timeout의 숫자민큼의 지연속도가 지나면 함수안에 내용이 실행된다.

        ex) 
        for (let i = 0; i < 100; i++) {
            setTimeout(() => {
            counterMaker();
            }, 1000 * i);
        }

        ex)
        for (let i = 0; i < 100; i++) {
            setTimeout(counterMaker, 1000 * i);
        }
        *하지만 타이밍이 정확하지 않고 이상고 100번만 반복하게 된다.

<serlnterval>
        ex)
            const test =()=>{
            console.log('hi')
            }
            
            setInterval(()=>{test()},1000)

        ex)
            const test =()=>{
            console.log('hi')
            }
            
            setInterval(test,1000)

<clearInterval>
    const intervalId = setInterval(counterMaker, 1000);
    intervalId에는 setInterval의 ID값이 저장이된다.

    clearInterval(intervalId)


<함수의 인자와 매개변수>

    <전달인자(Arguments), 매개변수(Parameter)>
        - 함수의 외부에서 데이터를 전달 받아 내부에서 활용하기 위한 수단

    <Web Storage>
        - 브라우저 내에 존재하는 데이터 저장소

<브라우저의 Web Storage>
    - Browser에 데이터를 저장할 수 있는 기술
    
    <Session Storage>
        - key-value 형태저장, 로컬 환경에 데이터 저장

        - 세션 단위로 구분되며 활용
        *세션 : 사용자가 브라우저를 통해 웹 페이지에 접속한 시점부터,
                해당 웹 페이지 접속을 종료하는 시점 까지를 의미하는 단위

        - 브라우저, 탭을 종료하면 영구 삭제

    <Local Storage>
        - key-value 형태 저장, 로컬 환경에 데이터 저장
        
        - 도메인 단위로 구분되며 활용

        - 브라우저 자체를 종료해도 존재

    <localhost 접근 방법>
        -  데이터를 저장하는 방법
           ex) localStorage.setItem("key값", value값 저장할 데이터 변수);

        -  데이터를 불러 오는 방법  : 가져 오고 싶은 값의 key만 입력
            ex) localStorage.getItem("key값");

        -   데이터를 삭제 하는 방법
            ex) localStorage.removeItem("saved-date");
    
    <조건문과 Storage 데이터의 조합>
        - 

    <Storage 데이터 유무에 따른 조건문>
        - 



<ul, ol, li 태그>
    ul : Unordered List 순서가 없는 목록
    ol : Orderer List 순서가 있는 목록


<DOM 이란?>
    - DOM(Document Object Model): 브라우저가 HTML 문서를 파싱하는 과정에서 생겨나는 객체

        
<키보드 event 체크>
    - onkeydown="" : 해당하는 태그 영역 안에서 키보드 버튼이 눌렸을때 작동을 한다.

    *window.event, event : 객체는 전역 객체이다. 이것을 활용해주면 어떤 이벤트인지를 체크 해줄 수 있다.
    keyCode를 통하여 어떠한 키인지를 알 수 있다.
        ex) console.log(window.event.keyCode === 13);

<JS로 HTML 태그 생성>
   - createElement : 태그를 생성해준다.  
    ex) document.createElement("li");

    <appendChild> : 태그 생성 해주기 위한 태그
        - DOM 구조를 조립 해주 어야 최종적으로 적용이 된다.
        ex) 변수명.appendChild(추가하고 싶은 태그 변수명) : 변수명 하위에 태그를 추가해 주겠다.

<addEventListener>
    - 이벤트 속성들을 직접 지정을 해줄 수 있는 태그이다.
    변수명.addEventListener("어떠한 속성을 넣을지", ()=>{어떠한 일을 할 것인지}); : 

    <.classList.toggle>
    - 클래스를 추가해주는 태그이다.
    변수명.classList.toggle("클래스명");

    <classList.contains>
    - 클래스 안에 해당 컨텐츠가 있는지를 불린 값으로 반환해준다.
    변수명.contains("찾을 컨텐츠"),


    <eventListener를 활용한 태그 삭제>
        <.remove>
            해당 태그를 삭제한다.
            ex) 변수명.remove();

        <.children> : 해당 DOM을 배열 구조로 가지고 온다.
        ex) 변수명.children

        <contains>
        todoList.children[i].classList.contains("complete"),
            해당 todoList의 요소 안에 있는 클래스의 컨텐츠 안에 complete이 있는가? 불린 값으로 반환을 해준다.

<스코프(scope)>
    <전역 스코프 (global scope)>
        - 전역 변수

    <지역 스코프 (local scope)>
        -지역 변수

    <함수 레밸 스코프>
        - 함수 밖에서는 함수 안에 있는 변수를 참조를 못한다.

        <var  키워드>
            - 함수 키워드를 따른다
            
        <let 키워드>
            - 함수 키워드를 따른다

    <블록 레벨 스코프>
        - {} : {}를 이용한 스코프이다.
        <var 키워드>
            - var 레밸의 변수는 블록 레벨 스코프에 영향을 받지 않아 {} 밖에서도 정상적으로 참조가 된다.
            - 즉, 블록 레밸 스코프가 적용 되지 않는다.

        <let 키워드>
            - 블록 레밸 스코프를 정상적으로 따른다.

<실핼 컨텍스트>
    - 소스 -> breakPoint를 사용하고 싶은 줄 클릭 -> breakPoint는 실행하다가 지정한 위치에서 멈추게 된다. -> 스코프의 정보를 알 수 있다. -> 위에 버튼을 이용하여 여러 기능들을 작동할 수 있다.
    <스코프 체인>
        - 해당 변수가 존재 하지 않으면 상위로 올라가면서 체크하는 것을 스코프 체인이라고 한다.

<객체 localStorage 저장>
    - 

<JSON>
    <stringify>
        - 배열을 문자로 반환 하고 싶을때는 String가 안먹힌다 때문에 
          JSON.stringify(배열 변수명)을 사용해 주어야한다.
        
    <parse>
        - 문자를 다시 데이터 형태로 변환 해주는 기능을 한다.
            ex) JSON.parse(localStorage.getItem("save-items"));

<호이스팅(hoisting)>
    - var 와 함수 선언식으로 정의된 함수는 호이스팅이 발생한다.

    <TDZ(Temporal Dead Zone)>
        - 선언 단계 : 선언한 변수를 식별자가 담기는 객체에 할당하는 단계

        - TDZ : 변수에 할당할 메모리가 부여되기 전 단계 
            ex) console.log(a);
                let | const a=1;
                // 메모리 공간을 부여하지 못하였기 때문에 에러가 TDZ단계 에서 에러가 발생하는 것이다.
                // let, const 변수는 해당 코드를 만나기 전에는 TDZ 데드존에 머물게 된다.

                - var 키워드,선언식 같은 경우 선언 단계와 초기화 단계가 같이 묶어져서 실행이 되기 떄문에 TDZ 단계가 없다.

        - 초기화 단계 : 변수에 할당할 메모리 공간을 부여하는 단계

        - 할당 단계 : 정의돈 변수에 데이터가 할당되는 단계

<삼항 연산자>
    - 삼항 연산자를 이용하면 if,else문을 간단하게 작성 할 수 있다.
        ex) saveItems.length === 0
            ? 조건이 맞으면 실행항 코드. 즉, if
            : 조건이 안 맞으면 실행할 코드. 즉, else


<데이터 통신>
    <API이란?>
        - 어떠한 프로그램에서 제공하는 기능을 사용자가 활용할 수 있도록 만들어 둔 인터페이스

    <geolocation, 위치 정보>
        - Geolocation API는 사용자의 위치를 ​​검색하는 데 사용되므로 예를 들어 매핑 API를 사용하여 위치를 표시하는 데 사용할 수 있습니다.

    <openWeatherMap, 날씨 정보>
        - OpenWeather One Call API 3.0을 사용하면 필수 기상 데이터와 집계된 기상 데이터를 쉽게 얻을 수 있습니다.

    <fetch()함수>
        - 데이터를 요청을 할 수 있는 함수이다.

<HTTP>
    -Hypertext Transfer Protocol : 서버와 클라이언트가 통신하기 위해 정의된 규약

    - GET : 서버의 데이터를 조회하는 Method, 요청 바디가 필요없다.
    - POST: 서버에 데에터를 등록하는 Method, 요청 바디가 필요하다.
    - PUT : 서버 내 데이터를 수정하는 Method, 요청 바디가 필요하다.
    - PATCH : 데이터를 일부 수정하는 Method, 요청 바디가 필요하다.
    - DELETE : 서버의 데이터를 삭제하는 Method
    - OPTIONS : 서버가 허용하는 Method를 확인하기 위한 Method 

<동기와 비동기>
    - 동기 : 서버에 요청을 보냈을 때 응답을 받아야 다음 작업을 할 수 있다.
    - 비공기 : 서버에 요청을 보냈을 때 응답과 상관없이 다음 작업을 할 수 있다.
    *자바스크립트는 동기적으로 동작하지만 비동기 작업도 가능하다.

<stack, queue>
    stack : LIFO(Last in First Out)
    queue : FIFO(First in First Out)

<Promise 객체>
    - 언젠가 데이터를 반환 해줄건데 아직 응답 받지 못했다. 이것이 Promise객체이다.
    <Promise의 3가지 상태>
        1. fulfilled : 요청이 성공한 상태
        2. pending : 요청에 대한 응답을 기다리고 있는 상태
        3. rejected : 요청이 실패한 상태

        ex) 직접 만들어 줄 수 도있다.
            const promiseTest = () => {
                return new Promise((resolver, reject) => {
                    setTimeout(()=>{
                        resolver(100)
                    },2000)
                })
            }

            promiseTest()/ //이렇게 하면 setTimeout때문에 pending값이 적용이 된다.
            promiseTest().then((res)=>{
                console.log(res)
            })// 이렇게 하면 응답이 완료 될때 까지 기다린 이후에 fulfilled를 반환해준다.

<json();>
    JSON.parse()를 사용하지 않는 이유는 데이터에 body, header가 포함되어 있어
    이때는 값을 불러올 수 없어 json()을 사용해야한다.

<then(), catch()>
    -catch() : 요청이 잘 이루어지지 않았다면 오류를 반환해준다.

<구조분해 할당>
    <배열 구조분의 할당>
        - 구조화 되어 있는 배열, 객체와 같은 데이터를 destructuring시켜, 각각의 변수에 담는 것
        * (리더러블)순회가 가능한 데이터만 가능하다.

        ex) let arr = [1,2]
            let [one, two] = arr
            console.log(one,two) => 1 2
    
    <객체 구조문의 할당>
        let obj={name : "otter", gender:"male"}
        let{name, gender} = obj

        let{name : newName, gender : newGender} = obj
        : 이렇게 할경우 obj에 들어있는 key 값이 newName과 newGender에 들어가게 된다.

        *실제로 존재하는 키만을 구조분의 할당을 할 수 가 있다.

<spread 연산자>
    - 하나로 뭉쳐있는 값들의 집합을 전개해주는 연산자.

    <배열>
        ex)
            let arr = [1,2,3,4,5]
            console.log(...arr) => 1,2,3,4,5
    
    <문자열>
        ex)
            let str="Heollo"
            console.log(...str) => "H" "e" "l" "l" "o"

    <겍체>
        객체에서는 원래 깊은 복사가 이루어지지만 spreed연산자를 사용하게 되면 얕은 복사가 발생한다.
        ex) const obj={name:"otter",gender:"male"}
            const newObj={...obj}
            newObj.name = "rabit"

            obj => {name: 'otter', gender: 'male'}
            newObj -> {name: 'rabit', gender: 'male'}


<깊은 복사, 얕은 복사>
    - 주소값까지만 복사하는 얕은 복사, 실제 데이터까지 복사하는 깊은 복사

    <깊은 복사>

        let origin={}
        const copy = JSON.stringify(origin) \\객체 혹은 배열 넣어주기, stringify문자열로 변환
        const deepCopy = JSON.parse(copy) \\ 깊은 복사가 이루어짐, parse원래 데이터 형태로 변환

    <rest 파라미터>
        let origin={
            name:"otter",
            age:25,
            petName:"mama"
            hobby:"game"
        }

        const{petName, hobby, ...rest}=origin

        console.log(petName) => mama
        console.log(hobby) => game
        console.log(rest) =>{name:"otter",age:25} *반드시 변수명이 rest일 필요는 없다. 단순 변수명이다.

<localStorage로 렌더링 딜레이 해결>
